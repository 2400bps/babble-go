// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	SendRequest
	SendResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendRequest struct {
	Nonce     uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SendRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SendRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SendRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SendResponse struct {
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*SendRequest)(nil), "rpc.SendRequest")
	proto.RegisterType((*SendResponse)(nil), "rpc.SendResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Babble service

type BabbleClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
}

type babbleClient struct {
	cc *grpc.ClientConn
}

func NewBabbleClient(cc *grpc.ClientConn) BabbleClient {
	return &babbleClient{cc}
}

func (c *babbleClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := grpc.Invoke(ctx, "/rpc.Babble/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Babble service

type BabbleServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
}

func RegisterBabbleServer(s *grpc.Server, srv BabbleServer) {
	s.RegisterService(&_Babble_serviceDesc, srv)
}

func _Babble_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BabbleServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Babble/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BabbleServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Babble_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Babble",
	HandlerType: (*BabbleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Babble_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0xca, 0xe4, 0xe2, 0x0e, 0x4e,
	0xcd, 0x4b, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe1, 0x62, 0xcd, 0xcb, 0xcf,
	0x4b, 0x4e, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x82, 0x70, 0x84, 0x04, 0xb8, 0x98, 0xb3,
	0x53, 0x2b, 0x25, 0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0x40, 0x4c, 0x90, 0xba, 0xb2, 0xc4, 0x9c,
	0xd2, 0x54, 0x09, 0x66, 0xb0, 0x18, 0x84, 0x23, 0x24, 0xc3, 0xc5, 0x59, 0x9c, 0x99, 0x9e, 0x97,
	0x58, 0x52, 0x5a, 0x94, 0x2a, 0xc1, 0x02, 0x96, 0x41, 0x08, 0x28, 0xf1, 0x71, 0xf1, 0x40, 0xac,
	0x2a, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x35, 0x32, 0xe6, 0x62, 0x89, 0xc8, 0xaf, 0xc8, 0x17, 0xd2,
	0xe6, 0x62, 0x01, 0x89, 0x0b, 0x09, 0xe8, 0x81, 0xdc, 0x86, 0xe4, 0x1a, 0x29, 0x41, 0x24, 0x11,
	0x88, 0xa6, 0x24, 0x36, 0xb0, 0xdb, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x0f, 0x57,
	0x3e, 0xc8, 0x00, 0x00, 0x00,
}
